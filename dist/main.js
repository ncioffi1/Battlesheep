/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/button.js":
/*!***********************!*\
  !*** ./src/button.js ***!
  \***********************/
/***/ ((module) => {

eval("class Button {\n    constructor(element, xLeft, xRight, yTop, yBot, buttonType, buttonPos) {\n        this.element = element;\n        this.xLeft = xLeft;\n        this.xRight = xRight;\n        this.yTop = yTop;\n        this.yBot = yBot;\n        this.buttonType = buttonType;\n        this.buttonPos = buttonPos;\n    }\n\n    // checks if you pressed the button.\n    buttonCheck(x_value, y_value) {\n        if (x_value > this.xLeft && x_value < this.xRight) {\n            if (y_value > this.yBot && y_value < this.yTop) {\n                return true\n            }\n        }\n\n        return false\n    }\n\n    clear() {\n        this.element.setType(\"blank\");\n        this.element.setColor(\"empty\");\n    }\n\n    press(){\n        console.log(\"called Press\");\n        this.element.press();\n    }\n\n    place(type, color) {\n        this.element.setType(type);\n        this.element.setColor(color);\n    }\n\n    placeSheepHead() {\n        this.element.setType(\"sheep\");\n        this.element.setColor(\"head\");\n    }\n\n    placeSheepBody() {\n        this.element.setType(\"sheep\");\n        this.element.setColor(\"body\");\n    }\n\n    fire(){\n        this.element.setType(\"fired\");\n        // if (this.element.type === \"sheep\" || this.element.type === \"sheep_hidden\"){\n\n        // }\n    }\n\n    hover() {\n        // if (!this.element.doNotHoverTypes.includes(this.element.type)) {\n        //     this.element.setColor(\"hover\");\n        // }\n\n        if (!this.element.doNotHoverTypes.includes(this.element.type)) {\n            this.element.setHoverState(\"hover\");\n        }\n        \n    }\n\n    blank() {\n        if (!this.element.doNotHoverTypes.includes(this.element.type)){\n            this.element.setHoverState(\"blank\");\n        }\n    }\n}\n\nmodule.exports = Button;\n\n//# sourceURL=webpack://battlesheep/./src/button.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// console.log(\"im the game\")\n\nvar square = document.getElementById(\"square\");\n\nconst Square = __webpack_require__(/*! ./square.js */ \"./src/square.js\");\nconst Button = __webpack_require__(/*! ./button.js */ \"./src/button.js\");\nconst Sheep = __webpack_require__(/*! ./sheep.js */ \"./src/sheep.js\");\nconst UIObject = __webpack_require__(/*! ./uiobject.js */ \"./src/uiobject.js\")\n\n// const Asteroid = require('./asteroid.js')\n\nclass Game {\n    constructor(layer3, ctx1, ctx2, ctx3, DIM_X, DIM_Y) {\n        this.i = 1;\n        // this.ctx = ctx;\n        this.layer3 = layer3;\n        this.ctx1 = ctx1;\n        this.ctx2 = ctx2;\n        this.ctx3 = ctx3;\n        this.state = -1;\n        this.altState = 0;\n        this.DIM_X = DIM_X;\n        this.DIM_Y = DIM_Y;\n        this.clickX = 0;\n        this.clickY = 0;\n        this.hoverX = 0;\n        this.hoverY = 0;\n        this.clicked = false;\n        this.clicked2 = false;\n        this.play = this.play.bind(this);\n        this.draw = this.draw.bind(this);\n        this.ships = [];\n        this.tempSheep;\n        this.tempSheep2;\n        this.tempSheep3;\n        this.tempSheep4;\n        // for testing\n        // this.sheepLeftToPlace = [1];\n        // this.computerLeftToPlace = [1];\n        this.sheepLeftToPlace = [6, 1, 2, 5, 1, 2];\n        this.computerLeftToPlace = [6, 1, 2, 5, 1, 2];\n\n        this.sheepPositions = [];\n        this.playerFoundPositions = [];\n        \n        this.enemySheepPositions = [];\n        this.enemyFoundPositions = [];\n\n        this.enemyFiredPositions = [];\n        this.playerFiredPositions = [];\n       \n        \n        this.buttons = [];\n        this.uiobjects = [];\n        this.enemyShips = [];\n        this.enemyButtons = [];\n        this.playerSheeps = [];\n        this.enemySheeps = [];\n        this.activeSheep;\n        this.activeTextString = \"\";\n        this.activeTextString2 = \"\";\n        this.activeTextString3 = \"\";\n        this.sideButton1 = \"Start Game\"\n        this.sideButton2 = \"Randomize\"\n        this.sideButton3 = \"Play Again\"\n        this.boardSize = 7;   // 7 works.\n        this.musicOn = true;\n        this.musicActivated = false;\n        this.gameActivated = false;\n        this.gameOver = false;\n        this.soundOn = true;\n\n        this.gameBG = new Square(ctx3, 400, 0, 800, 1200, \"gameBG\", \"gameBG\");\n        this.githubLogo = new Square(ctx3, 400, 520, 50, 50, \"github\", \"github\");\n        this.githubButton = new Button(this.githubLogo, 378, 425, 545, 497, \"github\", \"N/A\");\n        this.creditsButton = new Button(\"N/A\", 617, 747, 546, 417, \"credits\", \"N/A\");\n        this.backButton = new Button(\"N/A\", 617, 747, 546, 417, \"back\", \"N/A\");\n        this.creditsSheep = new Square(ctx3, 400, 290, 800, 600, \"gameSheep\", \"gameSheep\");\n        this.gameLogo = new Square(ctx3, 400, 180, 800 / 1.25, 200 / 1.25, \"gameLogo\", \"gameLogo\");\n        this.gameSheep = new Square(ctx3, 120, 480, 150, 150, \"gameSheep\", \"gameSheep\");\n        this.gameSheep2 = new Square(ctx3, 800 - 120, 480, 150, 150, \"gameSheep\", \"gameSheep\");\n        this.gamePlay = new UIObject(this.ctx3, 400, 320, 400, 400, \"gameplay\", \"unpressed\", \"play\");\n        this.gamePlayButton = new Button(this.gamePlay, 245, 555, 382, 270, \"play\", \"N/A\");\n        this.draw();\n\n        this.bgmusic = new Audio(\"./assets/sounds/bamacountry.mp3\");\n        this.cannon1 = new Audio(\"./assets/sounds/cannon1.mp3\");\n        this.sheep1 = new Audio(\"./assets/sounds/sheep1.mp3\");\n        this.tongue1 = new Audio(\"./assets/sounds/tongue1.mp3\");\n\n        this.drawCall = 0;\n        this.playCall = 0;\n\n        // this.redirect();\n\n        // console.log(this.bgmusic);\n    }\n\n    // note this project uses febucci lerp functions found here:\n    // https://www.febucci.com/2018/08/easing-functions/\n\n    getCursorPosition(canvas, event) {\n        const rect = canvas.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        this.clickX = x;\n        this.clickY = y;\n        this.clicked = true;\n        this.clicked2 = true;\n        console.log(\"x: \" + x + \" y: \" + y)\n    }\n\n    getHoverPosition(canvas, event) {\n        const rect = canvas.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        this.hoverX = x;\n        this.hoverY = y;\n        // console.log(\"x: \" + x + \" y: \" + y)\n    }\n    \n    // const canvas = document.querySelector('canvas')\n    \n\n    drawImageInCanvas(context, filepath, xPos, yPos, xSize, ySize) {\n        var img1 = new Image();\n        //drawing of the test image - img1\n        img1.onload = () => {\n            context.drawImage(img1, (xPos - xSize/2), (yPos - ySize/2), xSize, ySize);\n        };\n        img1.src = filepath;\n    }\n    // creating a custom game update loop.\n    play() {\n        if (this.state === -1){\n            if (this.altState === 0){\n                this.altState = 1;\n\n                let that = this;\n                this.layer3.addEventListener('mousedown', function(e) {\n                    // console.log(\"CLICK\")\n                    that.getCursorPosition(layer3, e)\n                })\n\n                this.layer3.addEventListener('mousemove', function(e) {\n                    that.getHoverPosition(layer3, e)\n                })\n            } else if (this.altState === 1) {\n                if (this.clicked){\n                    this.clicked = false;\n                    let that = this;\n\n                    if (this.gamePlayButton.buttonCheck(that.clickX, that.clickY)) {\n                        if (this.gamePlayButton.buttonType === \"play\"){\n                            this.gamePlayButton.press();\n                            that.altState = 99;\n\n                            setTimeout(() => {\n                                this.state = 0;\n                                this.altState = 0;\n                            }, 300)\n                        }\n                    } else if (this.creditsButton.buttonCheck(that.clickX, that.clickY)) {\n                        this.state = -2;\n                        this.altState = 0;\n                    } else if (this.githubButton.buttonCheck(that.clickX, that.clickY)) {\n                        this.redirectToGithub();\n                    }\n                }\n            }\n        } else if (this.state === -2) {\n            if (this.clicked){\n                this.clicked = false;\n                let that = this;\n\n                if (this.backButton.buttonCheck(that.clickX, that.clickY)) {\n                    that.state = -1;\n                    that.altState = 1;\n                }\n            }\n        } else if (this.state === 0){\n            if (this.altState === 0) {\n                this.altState = 1;\n                \n                this.activeTextString = \"Move Your Sheeps\"\n                this.activeTextString2 = \"Click 'Randomize' To Move Them\";\n                this.activeTextString3 = \"When You're Ready, Click 'Start Game'\";\n                \n                // generate game board\n                this.generateSquares(this.ctx3);\n                this.generateEnemySquares(this.ctx3);\n                this.generateMenuButtons(this.ctx3);\n\n                this.spawnSheep(\"enemy\");\n                this.spawnSheep(\"player\");\n                // console.log(\"spawned sheeps\");\n                \n            } else if (this.altState === 1) {\n                // tracking clicks.\n                if (this.clicked){\n                    this.clicked = false;\n                    let that = this;\n\n                    this.buttons.forEach(function(button) {\n                        if (button.buttonCheck(that.clickX, that.clickY)) {\n                            if (button.buttonType === \"randomize\") {\n                                button.press();\n                                that.clearSheep(\"player\");\n                                that.spawnSheep(\"player\");\n                                \n                                if (that.soundOn){\n                                    that.sheep1.pause;\n                                    that.sheep1.currentTime = 0;\n                                    that.sheep1.play();\n                                }\n                            } else if (button.buttonType === \"start\") {\n                                that.activeTextString = \"\";\n                                that.activeTextString2 = \"\";\n                                that.activeTextString3 = \"\";\n                                button.press();\n                                that.altState = 99;\n                                setTimeout(() => {\n                                    that.altState = 2;\n                                    that.gameActivated = true;\n                                    that.musicActivated = true;\n                                    if (that.musicOn){\n                                        that.bgmusic.play();\n                                        that.bgmusic.loop = true;\n                                    }\n\n                                }, 300)\n                            }\n                        }\n                    })\n                }\n\n                // tracking hover.\n                let that = this;\n\n                // call this w. activesheep hover function\n                this.buttons.forEach(function(button) {\n                    if (button.buttonType === \"ship\") {\n                        if (button.buttonCheck(that.hoverX, that.hoverY)) {\n                            //that.activeSheep.hoverSheep(button.buttonPos);\n                        } \n                    }  \n                })\n            } else if (this.altState === 2) {\n                setTimeout(() => { this.altState = 3 }, 1000);\n\n                this.queueMoveShips();\n            } else if (this.altState === 3) {\n                this.activeTextString = \"\";\n                this.activeTextString2 = \"\";\n                this.activeTextString3 = \"\";\n\n                if (this.moveShips(\"down\")){\n                    this.altState = 4;\n                    this.clicked = false;\n                }\n            } else if (this.altState === 4){\n                if (this.activeTextString === \"\"){\n                    this.activeTextString = \"Fire Your Cannon\";\n                    this.activeTextString2 = \"\";\n                    this.activeTextString3 = \"\";\n                }\n                \n                // fire.\n                if (this.clicked){\n                    this.clicked = false;\n                    let that = this;\n                    let goAgain = false;\n                    let firedOnASquare = false;\n\n                    // player:  PLAYER\n                    this.enemyButtons.forEach(function(button) {\n                        if (button.buttonCheck(that.clickX, that.clickY)) {\n                            if (button.buttonType === \"ship\") {\n                                if (!that.hasBeenFired(\"player\", button.buttonPos)){\n                                    // firing upon square.\n                                    firedOnASquare = true;\n                                    button.fire();    // change status of ele to fired\n                                    // player is firing.\n                                    that.playerFiredPositions.push(button.buttonPos);   \n                                    if (that.checkIfFoundSheep(\"player\", button.buttonPos)) {\n                                        goAgain = true;\n                                    }\n\n                                    if (goAgain) {\n                                        if (that.soundOn){\n                                            that.cannon1.pause;\n                                            that.cannon1.currentTime = 0;\n                                            that.cannon1.play();\n\n                                            setTimeout(() => { \n                                                that.tongue1.pause;\n                                                that.tongue1.currentTime = 0;\n                                                that.tongue1.play();\n                                            }, 500);\n                                        }\n                                    } else {\n                                        if (that.soundOn){\n                                            that.cannon1.pause;\n                                            that.cannon1.currentTime = 0;\n                                            that.cannon1.play();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    })\n\n                    if (that.playerWon()) {\n                        that.state = 1;\n                        that.altState = 0;\n                        that.activeTextString = \"You Win!\";\n                        that.activeTextString2 = \"\";\n                    } else if (!goAgain) { // if you got a hit, go again.  otherwise switch turns.\n                        if (firedOnASquare) {\n                            that.altState = 5;\n                            that.activeTextString = \"You Missed!\";\n                        }\n                    } else {\n                        if (firedOnASquare) {\n                            that.activeTextString = \"You Hit!  You Go Again.\";\n                        }\n                    }\n                    \n\n                }\n\n                // tracking hover.\n                let that = this;\n                this.enemyButtons.forEach(function(button) {\n                    if (button.buttonType === \"ship\") {\n                        if (button.buttonCheck(that.hoverX, that.hoverY)) {\n                            button.hover();\n                        } else {\n                            button.blank();\n                        }   \n                    }  \n                })\n            } else if (this.altState === 5) {\n                setTimeout(() => { this.altState = 6 }, 1000);\n\n                this.queueMoveShips();\n            } else if (this.altState === 6) {\n                this.activeTextString = \"\";\n                this.activeTextString2 = \"\";\n                this.activeTextString3 = \"\";\n\n                if (this.moveShips(\"up\")){\n                    this.altState = 7;\n                }\n            } else if (this.altState === 7) {\n                this.altState = 99;\n\n                // enemy makes move.\n                let options = this.generatePositionsForComputerFiring();\n                let goAgain = false;\n\n                let that = this;\n\n                if (options.length === 0) {\n                    // computer wins!\n                    that.state = 1;\n                    that.altState = 0;\n                    that.activeTextString = \"Computer Wins!\";\n                } else {\n                    let random = Math.floor(Math.random() * options.length);  // pick a random one.\n                    let random_pos = options[random];\n\n                    // player:  ENEMY\n                    this.buttons.forEach(function(button) {\n                        if (button.buttonPos[0] === random_pos[0] && button.buttonPos[1] === random_pos[1]) {\n                            if (button.buttonType === \"ship\") {\n                                if (!that.hasBeenFired(\"enemy\", button.buttonPos)){\n                                    button.fire();    // change status of ele to fired\n                                    // enemy is firing.\n                                    that.enemyFiredPositions.push(button.buttonPos);   \n                                    if (that.checkIfFoundSheep(\"enemy\", button.buttonPos)) {\n                                        goAgain = true;\n                                    }\n\n                                    if (goAgain) {\n                                        if (that.soundOn){\n                                            that.cannon1.pause;\n                                            that.cannon1.currentTime = 0;\n                                            that.cannon1.play();\n\n                                            setTimeout(() => { \n                                                that.tongue1.pause;\n                                                that.tongue1.currentTime = 0;\n                                                that.tongue1.play();\n                                            }, 500);\n                                        }\n                                    } else {\n                                        if (that.soundOn){\n                                            that.cannon1.pause;\n                                            that.cannon1.currentTime = 0;\n                                            that.cannon1.play();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    })\n\n                    if (that.computerWon()) {\n                        that.state = 1;\n                        that.altState = 0;\n                        that.activeTextString = \"Computer Wins!\";\n                        that.activeTextString2 = \"\";\n                    } else if (!goAgain) { // if you got a hit, go again.  otherwise switch turns.\n                        that.activeTextString = \"Computer Missed!\";\n                        setTimeout(() => { this.altState = 2 }, 200);\n                        // that.altState = 2;\n                    } else {\n                        that.activeTextString = \"Computer Hit!  Computer Goes Again.\";\n                        setTimeout(() => { this.altState = 7 }, 1000);\n                    }\n                    \n                }\n            }\n        } else if (this.state === 1){\n            if (this.altState === 0){\n                // game over.\n                this.gameOver = true;\n                if (this.clicked){\n                    this.clicked = false;\n\n                    let that = this;\n\n                    this.buttons.forEach(function(button) {\n                        if (button.buttonCheck(that.clickX, that.clickY)) {\n                            if (button.buttonType === \"replay\") {\n                                button.press();\n                                \n                                that.altState = 99;\n                                \n                                setTimeout(() => {\n                                    that.resetGame();\n                                }, 300)\n                            }\n                        }\n                    })\n                }\n            }\n        }\n        this.i += 1;\n\n        // this.playCall += 1;\n        // if (this.playCall % 60 === 0) {\n        //     console.log(\"PLAY CALL:  \" + this.playCall.toString());\n        // }\n        // run the callback loop.\n\n        // at any point, you can turn the sound / music on or off.\n        // this would break our existing click checks - so lets add a second\n        // one for the purpose of checking clicks outside the loop.\n        if (this.clicked2){\n            this.clicked2 = false;\n            let that = this;\n\n            this.buttons.forEach(function(button) {\n                if (button.buttonCheck(that.clickX, that.clickY)) {\n                    if (button.buttonType === \"music\") {\n                        button.press();\n                        if (that.musicOn){\n                            that.bgmusic.pause();\n\n                            that.musicOn = false;\n                        } else {\n                            if (that.musicActivated){\n                                that.bgmusic.play();\n                                that.bgmusic.loop = true;\n                            }\n                            that.musicOn = true;\n                        }\n                    } else if (button.buttonType === \"sound\") {\n                        button.press();\n                        if (that.soundOn){\n                            that.soundOn = false;\n                        } else {\n                            that.soundOn = true;\n                        }\n                    }\n                }\n            })\n        }\n\n        requestAnimationFrame(this.play);\n    }\n\n    resetGame() {\n        this.gameActivated = false;\n        this.musicActivated = false;\n        this.gameOver = false;\n        this.ships = [];\n        this.buttons = [];\n        this.enemyShips = [];\n        this.enemyButtons = [];\n        this.enemySheeps = [];\n        this.playerSheeps = [];\n        this.sheepPositions = [];\n        this.enemySheepPositions = [];\n        this.enemyFoundPositions = [];\n        this.playerFoundPositions = [];\n        this.playerFiredPositions = [];\n        this.enemyFiredPositions = [];\n\n        this.clearSheep(\"player\");\n        this.clearSheep(\"enemy\");\n\n        this.bgmusic.pause();\n        this.bgmusic.currentTime = 0;\n\n        // reset gameBG;\n        this.gameBG = new Square(this.ctx3, 400, 0, 800, 1200, \"gameBG\", \"gameBG\");\n\n        this.state = 0;\n        this.altState = 0;\n    }\n\n    generateMenuButtons() {\n        let start_rect = new UIObject(this.ctx3, 700, 495, 150, 150, \"gameplay\", \"unpressed\", \"start\");\n        let random_rect = new UIObject(this.ctx3, 700, 420, 150, 150, \"gameplay\", \"unpressed\", \"random\");\n        let replay_rect = new UIObject(this.ctx3, 700, 495, 150, 150, \"gameplay\", \"unpressed\", \"replay\");\n\n        this.uiobjects.push(start_rect);\n        this.uiobjects.push(random_rect);\n        this.uiobjects.push(replay_rect);\n\n        let start_button = new Button(start_rect, 644, 760, 518, 477, \"start\", \"N/A\");\n        let randomize_button = new Button(random_rect, 644, 760, 443, 401, \"randomize\", \"N/A\");\n        let replay_button = new Button(replay_rect, 644, 760, 518, 477, \"replay\", \"N/A\");\n        this.buttons.push(start_button);\n        this.buttons.push(randomize_button);\n        this.buttons.push(replay_button);\n\n        let music_UI = new UIObject(this.ctx3, 680, 50, 200, 200, \"music\", \"unpressed\", \"on\")\n        let sound_UI = new UIObject(this.ctx3, 740, 50, 200, 200, \"sound\", \"unpressed\", \"on\")\n        this.uiobjects.push(music_UI);\n        this.uiobjects.push(sound_UI);\n\n        let music_button = new Button(music_UI, 655, 705, 81, 25, \"music\", \"N/A\")\n        let sound_button = new Button(sound_UI, 716, 766, 81, 25, \"sound\", \"N/A\")\n        this.buttons.push(music_button);\n        this.buttons.push(sound_button);\n    }\n\n    // enemy is firing.\n    generatePositionsForComputerFiring() {\n        let positions = [];\n\n        for (let i = 0; i < this.boardSize; i++){\n            for (let j = 0; j < this.boardSize; j++){\n                if (!JSON.stringify(this.enemyFiredPositions).includes([i, j])) {\n                    // if the PLAYER hasn't already fired on this position, add it.\n                    positions.push([i, j]);\n                }\n            }\n        }\n        return positions;\n    }\n\n    clearTempSheep() {\n        if (this.tempSheep !== undefined) {\n            delete this.tempSheep;\n        }\n        if (this.tempSheep2 !== undefined) {\n            delete this.tempSheep2;\n        }\n        if (this.tempSheep3 !== undefined) {\n            delete this.tempSheep3;\n        }\n        if (this.tempSheep4 !== undefined) {\n            delete this.tempSheep4;\n        }\n    }\n\n\n    redirectToGithub(){\n        window.location = \"https://github.com/ncioffi1\"\n    }\n    playerWon() {\n        if (this.enemySheepPositions.length === this.enemyFoundPositions.length) {\n            return true;\n        }\n        return false;\n    }\n\n    computerWon() {\n        if (this.sheepPositions.length === this.playerFoundPositions.length) {\n            return true;\n        }\n        return false;\n    }\n\n    checkIfHasSheep(pos) {\n        if (JSON.stringify(this.enemySheepPositions).includes(pos)) {\n            return true;\n        }\n        return false;\n    }\n\n    checkIfFoundSheep(playerType, pos) {\n        if (playerType === \"player\") {\n            if (JSON.stringify(this.enemySheepPositions).includes(pos)) {\n                this.enemyFoundPositions.push(pos);\n    \n                // sheep logic.\n                let that = this;\n                let foundPart = false;\n                this.enemySheeps.forEach(function(enemySheep) {\n                    if (enemySheep.checkIfFoundPart(pos)) {\n                        foundPart = true;\n                    }\n    \n                    if (enemySheep.isSheepFound()) {\n                        enemySheep.sheepPartPositions.forEach(function(_pos) {\n                            that.revealAroundPosition(\"player\", _pos);\n                        })\n                    }\n                })\n    \n                return foundPart;\n            }\n        } else if (playerType === \"enemy\") {\n            if (JSON.stringify(this.sheepPositions).includes(pos)) {\n                this.playerFoundPositions.push(pos);\n    \n                // sheep logic.\n                let that = this;\n                let foundPart = false;\n                this.playerSheeps.forEach(function(playerSheep) {\n                    if (playerSheep.checkIfFoundPart(pos)) {\n                        foundPart = true;\n                    }\n    \n                    if (playerSheep.isSheepFound()) {\n                        playerSheep.sheepPartPositions.forEach(function(_pos) {\n                            that.revealAroundPosition(\"enemy\", _pos);\n                        })\n                    }\n                })\n    \n                return foundPart;\n            }\n        }\n    }\n\n    revealAroundPosition(playerType, pos){\n        let x = pos[0];\n        let y = pos[1];\n        let positions = [];\n        for (let i = -1; i < 2; i++){\n            for (let j = -1; j < 2; j++){\n                let _x = x + i;\n                let _y = y + j;\n                let newPos = [_x, _y];\n                positions.push(newPos);\n            }\n        }\n        let that = this;\n        if (playerType === \"player\") {\n            this.enemyButtons.forEach(function(button){\n                if (JSON.stringify(positions).includes(button.buttonPos)){\n                    button.fire();\n                    // check positions player has fired on.\n                    if (!JSON.stringify(that.playerFiredPositions).includes(button.buttonPos)){\n                        that.playerFiredPositions.push(button.buttonPos);\n                    }\n                }\n            })\n        } else if (playerType === \"enemy\") {\n            this.buttons.forEach(function(button){\n                if (JSON.stringify(positions).includes(button.buttonPos)){\n                    button.fire();\n                    // check positions enemy has fired on.\n                    if (!JSON.stringify(that.enemyFiredPositions).includes(button.buttonPos)){\n                        that.enemyFiredPositions.push(button.buttonPos);\n                    }\n                }\n            })\n        } \n    }\n\n    queueMoveShips(){\n        // queueing move for each ship\n        this.ships.forEach(function(ship){\n            ship.queueMove();\n            ship.clearTime();\n        })\n        // queueing move for each enemy ship\n        this.enemyShips.forEach(function(ship){\n            ship.queueMove();\n            ship.clearTime();\n        })\n\n        this.gameBG.queueMove();\n        this.gameBG.clearTime();\n    }\n\n    moveShips(direction) {\n        let that = this;\n        that.done = true;\n        this.ships.forEach(function(ship){\n            if (!ship.moveComplete) {\n                if (direction === \"down\"){\n                    if (ship.currentTime === 0) {\n                        ship.currentTime = Date.now();\n                        ship.lastTime = Date.now();\n                    } else {\n                        ship.moveDown();\n                    }\n                    that.done = false;\n                } else if (direction === \"up\"){\n                    if (ship.currentTime === 0) {\n                        ship.currentTime = Date.now();\n                        ship.lastTime = Date.now();\n                    } else {\n                        ship.moveUp();\n                    }\n                    that.done = false;\n                }\n            }\n        })\n        // queueing move for each enemy ship\n        this.enemyShips.forEach(function(ship){\n            if (!ship.moveComplete) {\n                if (direction === \"down\"){\n                    if (ship.currentTime === 0) {\n                        ship.currentTime = Date.now();\n                        ship.lastTime = Date.now();\n                    } else {\n                        ship.moveDown();\n                    }\n                    that.done = false;\n                } else if (direction === \"up\") {\n                    if (ship.currentTime === 0) {\n                        ship.currentTime = Date.now();\n                        ship.lastTime = Date.now();\n                    } else {\n                        ship.moveUp();\n                    }\n                    that.done = false;\n                }\n            }\n        })\n\n        if (!this.gameBG.moveComplete) {\n            if (direction === \"down\"){\n                if (this.gameBG.currentTime === 0) {\n                    this.gameBG.currentTime = Date.now();\n                    this.gameBG.lastTime = Date.now();\n                } else {\n                    this.gameBG.moveDown();\n                }\n                that.done = false;\n            } else if (direction === \"up\") {\n                if (this.gameBG.currentTime === 0) {\n                    this.gameBG.currentTime = Date.now();\n                    this.gameBG.lastTime = Date.now();\n                } else {\n                    this.gameBG.moveUp();\n                }\n                that.done = false;\n            }\n        }\n\n        return that.done;\n    }\n\n    hasSheep(pos) {\n        if (this.sheepPositions.includes(pos)){\n            return true;\n        }\n        return false;\n    }\n\n\n    hasBeenFired(playerType, pos) {\n        if (playerType === \"enemy\") {\n            if (JSON.stringify(this.enemyFiredPositions).includes(pos)){\n                return true;\n            }\n        } else if (playerType === \"player\") {\n            if (JSON.stringify(this.playerFiredPositions).includes(pos)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    validSpotToPlace(playerType, pos, myInvalidPositions, logForPlayer) {\n        if (myInvalidPositions === undefined){\n            if (playerType === \"player\"){\n                myInvalidPositions = this.sheepPositions;\n            } else if (playerType === \"enemy\"){\n                myInvalidPositions = this.enemySheepPositions;\n            }\n        }\n        if (logForPlayer === undefined) {\n            logForPlayer = false;\n        }\n        // check if surrounding squares have sheep.\n        if (pos[0] < 0 || pos[0] > (this.boardSize - 1)) {\n            if (playerType === \"player\") {\n                if (logForPlayer) {\n                    this.activeTextString2 = \"Invalid Position:\"  \n                    this.activeTextString3 = \"Position was off board!\";\n                }\n            }\n            return false;\n        } else if (pos[1] < 0 || pos[1] > (this.boardSize - 1)) {\n            if (playerType === \"player\") {\n                if (logForPlayer){\n                    this.activeTextString2 = \"Invalid Position:\"  \n                    this.activeTextString3 = \"Position was off board!\";\n                }\n            }\n            return false;\n        }\n        \n        let i = -1;\n        let j = -1;\n        for (i = -1; i < 2; i++){\n            for (j = -1; j < 2; j++) {\n                let x = pos[0] + i;\n                let y = pos[1] + j;\n                let _pos = [x, y];\n\n                if (playerType === \"player\"){\n                    if (JSON.stringify(myInvalidPositions).includes(_pos)){\n                        if (logForPlayer){\n                            this.activeTextString2 = \"Invalid Position:\"  \n                            this.activeTextString3 = \"Position too close to another sheep!\";\n                        }\n                        return false;\n                    }  \n                } else if (playerType === \"enemy\") {\n                    if (JSON.stringify(myInvalidPositions).includes(_pos)){\n                        \n                        return false;\n                    }  \n                }          \n            }\n        }\n        return true;\n    }\n\n    generateSquares(ctx) {\n        let size = this.boardSize;\n        for (let i = 0; i < size; i++) {\n            for (let j = 0; j < size; j++){\n                let xPos = 400 - ((Math.floor(size / 2)) * 50) + (i * 50);\n                let yPos = 200 + (j * 50);\n                let ship = new Square(ctx, xPos, yPos, 50, 50, \"blank\", \"empty\");\n                this.ships.push(ship);\n                let x_left = xPos - 20;\n                let x_right = xPos + 20;\n                let y_top = yPos + 20;\n                let y_bot = yPos - 20;\n                let button = new Button(ship, x_left, x_right, y_top, y_bot, \"ship\", [i, j]);\n                this.buttons.push(button);\n            }\n        }\n    }\n\n    generateEnemySquares(ctx) {\n        let size = this.boardSize;\n        for (let i = 0; i < size; i++) {\n            for (let j = 0; j < size; j++){\n                let xPos = 400 - ((Math.floor(size / 2)) * 50) + (i * 50);\n                let yPos = 200 - 600 + (j * 50);\n                let ship = new Square(ctx, xPos, yPos, 50, 50, \"blank\", \"empty\");\n                this.enemyShips.push(ship);\n                let x_left = xPos - 20;\n                let x_right = xPos + 20;\n                let y_top = yPos + 20 + 600;\n                let y_bot = yPos - 20 + 600;\n                let button = new Button(ship, x_left, x_right, y_top, y_bot, \"ship\", [i, j]);\n                this.enemyButtons.push(button);\n            }\n        }\n    }\n\n    generateTempSheep(id) {\n        let xMod = 250;\n        let yMod = -25;\n        if (id === 1){\n            let xPos = 400 + xMod;\n            let yPos = 125 + yMod;\n\n            this.tempSheep = new Square(this.ctx3, xPos, yPos, 50, 50, \"head\", \"sheep\");\n            \n        } else if (id === 2) {\n            let xPos = 375 + xMod;\n            let yPos = 125 + yMod;\n\n            this.tempSheep = new Square(this.ctx3, xPos, yPos, 50, 50, \"head\", \"sheep\");\n            this.tempSheep2 = new Square(this.ctx3, xPos + 50, yPos, 50, 50, \"body\", \"sheep\");\n            \n        } else if (id === 3) {\n            let xPos = 350 + xMod;\n            let yPos = 125 + yMod;\n\n            this.tempSheep = new Square(this.ctx3, xPos, yPos, 50, 50, \"head\", \"sheep\");\n            this.tempSheep2 = new Square(this.ctx3, xPos + 50, yPos, 50, 50, \"body\", \"sheep\");\n            this.tempSheep3 = new Square(this.ctx3, xPos + 100, yPos, 50, 50, \"body\", \"sheep\");\n           \n        } else if (id === 4) {\n            let xPos = 325 + xMod;\n            let yPos = 125 + yMod;\n\n            this.tempSheep = new Square(this.ctx3, xPos, yPos, 50, 50, \"head\", \"sheep\");\n            this.tempSheep2 = new Square(this.ctx3, xPos + 50, yPos, 50, 50, \"body\", \"sheep\");\n            this.tempSheep3 = new Square(this.ctx3, xPos + 100, yPos, 50, 50, \"body\", \"sheep\");\n            this.tempSheep4 = new Square(this.ctx3, xPos + 150, yPos, 50, 50, \"body\", \"sheep\");\n            \n        } else if (id === 5) {\n            let xPos = 375 + xMod;\n            let yPos = 100 + yMod;\n\n            this.tempSheep = new Square(this.ctx3, xPos, yPos, 50, 50, \"head\", \"sheep\");\n            this.tempSheep2 = new Square(this.ctx3, xPos + 50, yPos, 50, 50, \"body\", \"sheep\");\n            this.tempSheep3 = new Square(this.ctx3, xPos + 50, yPos + 50, 50, 50, \"body\", \"sheep\");\n            \n        } else if (id === 6) {\n            let xPos = 350 + xMod;\n            let yPos = 100 + yMod;\n\n            this.tempSheep = new Square(this.ctx3, xPos, yPos, 50, 50, \"head\", \"sheep\");\n            this.tempSheep2 = new Square(this.ctx3, xPos + 50, yPos, 50, 50, \"body\", \"sheep\");\n            this.tempSheep3 = new Square(this.ctx3, xPos + 100, yPos, 50, 50, \"body\", \"sheep\");\n            this.tempSheep4 = new Square(this.ctx3, xPos + 50, yPos + 50, 50, 50, \"body\", \"sheep\");\n\n            \n        }\n        this.activeSheep = this.generateActiveSheep(id);\n    }\n\n    generateActiveSheep(id) {\n        if (id === 1){\n            return new Sheep(this, [[0, 0]]);\n        } else if (id === 2) {\n            return new Sheep(this, [[0, 0], [1, 0]]);\n        } else if (id === 3) {\n            return new Sheep(this, [[0, 0], [1, 0], [2, 0]]);\n        } else if (id === 4) {\n            return new Sheep(this, [[0, 0], [1, 0], [2, 0], [3, 0]]);\n        } else if (id === 5) {\n            return new Sheep(this, [[0, 0], [1, 0], [1, 1]]);\n        } else if (id === 6) {\n            return new Sheep(this, [[0, 0], [1, 0], [2, 0], [1, 1]] );\n        }\n    }\n\n    clearSheep(playerType) {\n        if (playerType === \"player\"){\n            this.playerSheeps = [];\n            this.sheepPositions = [];\n            this.buttons.forEach(function(button) {\n                if (button.buttonType === \"ship\") {\n                    button.clear();\n                }\n            })\n        } else if (playerType === \"enemy\") {\n            this.enemySheeps = [];\n            this.enemySheepPositions = [];\n            this.enemyButtons.forEach(function(button) {\n                if (button.buttonType === \"ship\") {\n                    button.clear();\n                }\n            })\n        }\n    }\n\n    spawnSheep(playerType){\n        let that = this;\n        let l = 0;\n        let myLeftToPlace = [];\n        if (playerType === \"player\"){\n            l = this.sheepLeftToPlace.length;\n            myLeftToPlace = JSON.parse(JSON.stringify(this.sheepLeftToPlace));\n        } else if (playerType === \"enemy\") {\n            l = this.computerLeftToPlace.length;\n            myLeftToPlace = JSON.parse(JSON.stringify(this.computerLeftToPlace));\n        }\n        let placingComplete = false;\n        let iterations = 0;\n        let q = 0;\n\n        while (!placingComplete) {\n            placingComplete = true;\n\n            if (q < l) {\n                this.activeSheep = this.generateActiveSheep(myLeftToPlace[q]);\n                \n                let positions = this.generatePossiblePositionArray(playerType);\n                if (positions.length === 0) {  // if theres no possible positions,\n                    iterations += 1;\n                    q = 0;\n                    this.clearSheep(playerType);\n                } else {\n                    let random = Math.floor(Math.random() * positions.length);  // pick a random one.\n                    let random_pos = positions[random];\n                    if (playerType === \"player\"){\n                        this.playerSheeps.push(this.activeSheep);\n                        this.activeSheep.placeSheep(\"player\", random_pos);\n                    } else if (playerType === \"enemy\"){\n                        this.enemySheeps.push(this.activeSheep);   // add the sheep to the enemy sheeps list.\n                        this.activeSheep.placeSheep(\"enemy\", random_pos);  // add the positions of the sheep to enemySheepPositions.\n                    }\n                    q += 1;\n                }\n                placingComplete = false;\n            } else {\n                placingComplete = true;\n            }\n        }\n\n        if (playerType === \"player\"){\n            // console.log(\"              \")\n            // console.log(\"--------------\")\n            // console.log(\"- debug tool -\")\n            // console.log(\"--------------\")\n            // console.log(\"Completed Placing Player Sheep!\");\n            // console.log(\"Total Iteration Cycles:  \" + iterations.toString());\n            // console.log(\"--------------\")\n            // console.log(\"Player left to place:  \" + this.sheepLeftToPlace.length.toString());\n            // console.log(\"Sheep Positions Length:  \" + this.sheepPositions.length.toString());\n            // console.log(\"Sheep Positions:  \");\n            // console.log(this.sheepPositions);\n            // console.log(\"Player Sheeps:  \" + this.playerSheeps.toString());\n            // console.log(\"sheep placed\");\n        } else if (playerType === \"enemy\"){\n            // console.log(\"              \")\n            // console.log(\"--------------\")\n            // console.log(\"- debug tool -\")\n            // console.log(\"--------------\")\n            // console.log(\"Completed Placing Enemy Sheep!\");\n            // console.log(\"Total Iteration Cycles:  \" + iterations.toString());\n            // console.log(\"--------------\")\n            // console.log(\"Computer left to place:  \" + this.computerLeftToPlace.length.toString());\n            // console.log(\"Enemy Sheep Positions Length:  \" + this.enemySheepPositions.length.toString());\n            // console.log(\"Enemy Sheep Positions:  \");\n            // console.log(this.enemySheepPositions);\n            // console.log(\"Enemy Sheeps:  \" + this.enemySheeps.toString());\n            // console.log(\"sheep placed\");\n        }\n    }\n\n\n    generatePossiblePositionArray(playerType, mySheep, myInvalidPositions) {\n        let positions = []\n        let that = this;\n        if (myInvalidPositions === undefined){\n            if (playerType === \"player\") {\n                myInvalidPositions = this.sheepPositions;\n            } else {\n                myInvalidPositions = this.enemySheepPositions;\n            }\n        }\n        if (mySheep === undefined){\n            mySheep = this.activeSheep;\n        }\n\n        for (let i = 0; i < this.boardSize; i++) {\n            for (let j = 0; j < this.boardSize; j++) {\n                let valid = true;\n                mySheep.sheepShapes.forEach(function(shape) {\n                    let _x = i + shape[0];\n                    let _y = j + shape[1];\n                    let _pos = [_x, _y];\n                    if (!that.validSpotToPlace(playerType, _pos, myInvalidPositions)) {\n                        valid = false;\n                    }\n                   \n                })\n                if (valid){\n                    positions.push([i, j]);\n                }\n            }\n        }\n        return positions;\n    }\n\n    draw() {\n        this.ctx1.clearRect(0, 0, 800, 600);\n        this.ctx3.clearRect(0, 0, 800, 600);\n\n        if (this.state === -1) {\n            this.ctx1.fillStyle = `rgb(108, 232, 45)`;\n            this.ctx1.fillRect(0, 0, 800, 600);\n\n            this.githubLogo.draw();\n            this.gameLogo.draw();\n            this.gameSheep.draw();\n            this.gameSheep2.draw();\n            this.gamePlay.draw();\n            this.ctx3.font = (\"60px Afacad\");\n            this.ctx3.fillStyle = \"black\";\n            this.ctx3.textAlign = \"center\";\n            if (this.gamePlay.color === \"unpressed\"){\n                this.ctx3.fillText(\"Play\", 400, 336);\n            } else if (this.gamePlay.color === \"pressed\"){\n                this.ctx3.fillText(\"Play\", 400, 338);\n            }\n            this.ctx3.font = (\"30px Afacad\");\n            this.ctx3.fillStyle = \"gray\";\n            this.ctx3.fillText(\"Credits\", 680, 510);\n\n        } else if (this.state === -2) {\n\n            this.ctx1.fillStyle = `rgb(108, 232, 45)`;\n            this.ctx1.fillRect(0, 0, 800, 600);\n            this.creditsSheep.draw();\n            this.gameSheep2.draw();\n            this.ctx3.font = (\"30px Afacad\");\n            this.ctx3.fillStyle = \"gray\";\n            this.ctx3.textAlign = \"center\";\n\n            this.ctx3.fillText(\"Back\", 680, 510);\n\n            this.ctx3.textAlign = \"start\";\n            let y = -20;\n            this.ctx3.fillText(\"Credits\", 150, 295 + y);\n            this.ctx3.font = (\"14px Afacad\");\n            this.ctx3.fillText(\"'Bama Country' Kevin MacLeod (incompetech.com)\", 150, 320 + y);\n            this.ctx3.fillText(\"Licensed under Creative Commons: By Attribution 4.0 License\", 150, 335 + y);\n            this.ctx3.fillText(\"http://creativecommons.org/licenses/by/4.0/\", 150, 350 + y);\n\n            this.ctx3.fillText(\"The following sounds are Licensed under Creative Commons: Attribution 4.0:\", 150, 380 + y);\n            this.ctx3.fillText(\"'uncompressed cannon.aif' by baefild of Freesound.org\", 150, 395 + y);\n            this.ctx3.fillText(\"'Sigh out tongue 02.wav' by Hawkeye_Sprout of Freesound.org\", 150, 410 + y);\n            \n            this.ctx3.fillText(\"The following sounds are Licensed under Creative Commons: 0:\", 150, 440 + y);\n            this.ctx3.fillText(\"'bah bala oveja/baa bleat sheep.WAV' by SergioJbs of Freesound.org\", 150, 455 + y);\n\n            this.ctx3.fillText(\"Made by Nick Cioffi for App Academy 2023.\", 150, 485 + y);\n            this.ctx3.fillText(\"All Sheeps Reserved.\", 150, 500 + y);\n            // \"Bama Country\" Kevin MacLeod (incompetech.com)\n            // Licensed under Creative Commons: By Attribution 4.0 License\n            // http://creativecommons.org/licenses/by/4.0/\n\n        } else {\n            this.drawGame();\n        }\n\n        requestAnimationFrame(this.draw);\n    }\n\n    drawGame() {\n        this.gameBG.draw(); \n        \n        // draw text.  if errors put on own context.\n        if (this.activeTextString !== \"\") {\n            this.ctx3.font = (\"30px Afacad\");\n            this.ctx3.fillStyle = \"black\";\n            this.ctx3.textAlign = \"center\";\n            this.ctx3.fillText(this.activeTextString, 400, 50);\n        }\n        \n        if (this.activeTextString2 !== \"\") {\n            this.ctx3.font = (\"16px Afacad\");\n            this.ctx3.fillStyle = \"black\";\n            this.ctx3.textAlign = \"center\";\n            this.ctx3.fillText(this.activeTextString2, 400, 80);\n        }\n\n        if (this.activeTextString3 !== \"\") {\n            this.ctx3.font = (\"16px Afacad\");\n            this.ctx3.fillStyle = \"black\";\n            this.ctx3.textAlign = \"center\";\n            this.ctx3.fillText(this.activeTextString3, 400, 100);\n        }\n\n        let that = this;\n        this.ctx3.font = (\"16px Afacad\");\n        this.ctx3.fillStyle = \"black\";\n        this.ctx3.textAlign = \"center\";\n\n        this.uiobjects.forEach(function(uiobject) {\n            if (uiobject.type === \"gameplay\") {\n                if (uiobject.status === \"replay\"){\n                    if (that.gameOver){\n                        uiobject.draw();\n\n                        if (uiobject.color === \"unpressed\"){\n                            that.ctx3.fillText(that.sideButton3, 700, 500);\n                        } else if (uiobject.color === \"pressed\"){\n                            that.ctx3.fillText(that.sideButton3, 700, 502);\n                        }\n                    }\n                } else {\n                    if (!that.gameActivated){\n                        uiobject.draw();\n    \n                        if (uiobject.status === \"start\"){\n                            if (uiobject.color === \"unpressed\"){\n                                that.ctx3.fillText(that.sideButton1, 700, 500);\n                            } else if (uiobject.color === \"pressed\"){\n                                that.ctx3.fillText(that.sideButton1, 700, 502);\n                            }\n                        } else if (uiobject.status === \"random\"){\n                            if (uiobject.color === \"unpressed\"){\n                                that.ctx3.fillText(that.sideButton2, 700, 425);\n                            } else if (uiobject.color === \"pressed\"){\n                                that.ctx3.fillText(that.sideButton2, 700, 427);\n                            }\n                        }\n                    }\n                }\n            } else {\n                uiobject.draw();\n            }\n        });\n\n        this.ships.forEach(function(ship) {\n            ship.draw();\n        });\n\n        this.enemyShips.forEach(function(ship) {\n            ship.draw();\n        });\n\n        if (this.tempSheep !== undefined){\n            this.tempSheep.draw();\n        }\n        if (this.tempSheep2 !== undefined) {\n            this.tempSheep2.draw();\n        }\n        if (this.tempSheep3 !== undefined) {\n            this.tempSheep3.draw();\n        }\n        if (this.tempSheep4 !== undefined) {\n            this.tempSheep4.draw();\n        }\n    }\n\n\n\n\n}\n\nmodule.exports = Game;\n\n//# sourceURL=webpack://battlesheep/./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("console.log(\"webpack confirmed working\")\n\nconst Game = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n// const GameView = require('./game-view.js');\n// const Asteroid = require('./asteroid.js');\n// const MovingObject = require('./moving-object.js');\n\n// let game = new Game() \ndocument.addEventListener('DOMContentLoaded', () => {\n    // grab canvas\n\n    // var myFont = new FontFace(\"Afacad\", 'url(https://fonts.googleapis.com/css?family=Afacad)')\n\n    // myFont.load().then(function(font) {\n    //     document.fonts.add(font);\n    //     console.log('Font loaded');\n    // })\n\n    // gonna try to do this with layers...\n    const layer1 = document.getElementById(\"layer1\");\n    const layer2 = document.getElementById(\"layer2\");\n    const layer3 = document.getElementById(\"layer3\");\n    layer1.width = 800;\n    layer1.height = 600;\n    layer2.width = 800;\n    layer2.height = 600;\n    layer3.width = 800;\n    layer3.height = 600;\n    \n    const ctx1 = layer1.getContext('2d');\n    const ctx2 = layer2.getContext('2d');\n    const ctx3 = layer3.getContext('2d');\n    // ctx.fillStyle = 'green';\n    // ctx.fillRect(0, 0, canvas.width, canvas.height)\n    const game = new Game(layer3, ctx1, ctx2, ctx3, layer1.width, layer1.height);\n\n    game.play();\n    // const obj = new MovingObject([100, 100], [5,5], 20, \"blue\");\n    // const gameview = new GameView(game, ctx);\n    // gameview.start();\n    // obj.draw(ctx);\n\n    // add code to test on window\n    // window.Game = Game;\n    // window.Asteroid = Asteroid;\n    // window.MovingObject = MovingObject;\n})\n\nconsole.log(\"boop\");\n\n//# sourceURL=webpack://battlesheep/./src/index.js?");

/***/ }),

/***/ "./src/sheep.js":
/*!**********************!*\
  !*** ./src/sheep.js ***!
  \**********************/
/***/ ((module) => {

eval("\nclass Sheep {\n    // this object will store each position making up\n    // a Sheep.\n    constructor(game, sheepShapes) {\n        this.sheepPartPositions = []\n        this.game = game;\n        this.size = this.sheepPartPositions.length;\n        this.sheepPartsFound = [];\n        this.sheepHeadPos;\n        this.sheepShapes = sheepShapes;\n    }\n\n    setSheepPartPositions(positions) {\n        this.sheepPartPositions = positions;\n        this.size = this.sheepPartPositions.length;\n    }\n\n    // sheepShape starts at 0,0.\n    // sheepshape options.\n    // [[0, 0]];\n    // [[0, 0], [1, 0]]                 |  [[0, 0], [0, 1]]\n    // [[0, 0], [1, 0], [2, 0]]         |  [[0, 0], [0, 1], [0, 2]]\n    // [[0, 0], [1, 0], [2, 0], [3, 0]] |  [[0, 0], [0, 1], [0, 2], [0, 3]]\n    // [[0, 0], [1, 0], [1, 1]]         |  [[1, 0], [1, 1], [0, 1]]         |  [[1, 1], [0, 1], [0, 0]          |  [0, 1], [0, 0], [1, 0]]\n    // [[0, 0], [1, 0], [2, 0], [1, 1]] |  [[0, 0], [0, 1], [0, 2], [1, 1]] |  [[1, 0] [0, 1] [1, 1] [2, 1]]    |  [[1, 0] [0, 1] [1, 1] [1, 2]]\n    hoverSheep(pos){\n        let hoverPositions = [];\n        let that = this;\n        this.sheepShapes.forEach(function(sheepShape) {\n            let _x = pos[0] + sheepShape[0];\n            let _y = pos[1] + sheepShape[1];\n            let _pos = [_x, _y];\n            hoverPositions.push(_pos);\n        })\n\n        this.game.buttons.forEach(function(button){\n            if (button.buttonType === \"ship\") {\n                if (JSON.stringify(hoverPositions).includes(button.buttonPos)){\n                    button.hover();\n                } else {\n                    button.blank();\n                }\n            }\n        })\n    }\n\n    getPlacePositionsOnly(pos) {\n        let placePositions = [];\n        let that = this;\n        this.sheepShapes.forEach(function(sheepShape) {\n            let _x = pos[0] + sheepShape[0];\n            let _y = pos[1] + sheepShape[1];\n            let _pos = [_x, _y];\n            placePositions.push(_pos);\n        })\n        return placePositions;\n    }\n\n    placeSheep(playerType, pos) {\n        let placePositions = [];\n        let that = this;\n        this.sheepShapes.forEach(function(sheepShape) {\n            let _x = pos[0] + sheepShape[0];\n            let _y = pos[1] + sheepShape[1];\n            let _pos = [_x, _y];\n            placePositions.push(_pos);\n        })\n\n        if (playerType === \"enemy\") {\n            this.game.enemyButtons.forEach(function(button) {\n                if (button.buttonType === \"ship\") {\n                    if (JSON.stringify(placePositions).includes(button.buttonPos)) {\n                        if (button.buttonPos.toString() === placePositions[0].toString()) {\n                            button.place(\"sheep_hidden\", \"head\")\n                        } else {\n                            button.place(\"sheep_hidden\", \"body\")\n                        }\n                        that.game.enemySheepPositions.push(button.buttonPos);\n                    }\n                }\n            })\n        } else if (playerType === \"player\") {\n            this.game.buttons.forEach(function(button) {\n                if (button.buttonType === \"ship\") {\n                    if (JSON.stringify(placePositions).includes(button.buttonPos)) {\n                        if (button.buttonPos.toString() === placePositions[0].toString()) {\n                            button.place(\"sheep\", \"head\")\n                        } else {\n                            button.place(\"sheep\", \"body\")\n                        }\n                        that.game.sheepPositions.push(button.buttonPos);\n                    }\n                }\n            })\n        }\n\n        this.setSheepPartPositions(placePositions);\n\n        // fin\n    }\n\n    isSheepFound() {\n        if (this.sheepPartsFound.length === this.size) {\n            return true;\n        }\n        return false;\n    }\n\n    checkIfFoundPart(pos){\n        // is this pos part of sheep?\n        let foundPart = false;\n        if (JSON.stringify(this.sheepPartPositions).includes(pos)){\n            console.log(\"FOUND SHEEP PART\")\n            foundPart = true;\n            // did you find this part already?\n            if (!JSON.stringify(this.sheepPartsFound).includes(pos)){\n                // add part to sheepPartsFound\n                console.log(\"ADDED PART TO SHEEP PARTS FOUND\")\n                // console.log(\"sheepPartsFound:  \" + this.sheepPartsFound.toString())\n                // console.log(\"sheepPartsFound.length:  \" + this.sheepPartsFound.length.toString());\n                // console.log(\"sheep size:  \" + this.size.toString());\n\n                this.sheepPartsFound.push(pos);\n            }\n        }\n        return foundPart;\n    }\n}\n\nmodule.exports = Sheep;\n\n//# sourceURL=webpack://battlesheep/./src/sheep.js?");

/***/ }),

/***/ "./src/square.js":
/*!***********************!*\
  !*** ./src/square.js ***!
  \***********************/
/***/ ((module) => {

eval("\nclass Square {\n    constructor(context, xPos, yPos, xSize, ySize, color, type) {\n        this.context = context;\n        this.xPos = xPos;\n        this.yPos = yPos;\n        this.xPosI = xPos;\n        this.yPosI = yPos;\n        // this.moveSpeed = 5;\n        // this.moveSpeed = 0.01;\n        this.timeSpeed = 0.01;\n        this.timeElapsed = 0;\n        this.currentTime;\n        this.lastTime;\n        this.lerpDuration = 3;\n        this.xSize = xSize;\n        this.ySize = ySize;\n        this.color = color;\n        this.type = type;\n        this.hoverState = \"blank\";\n        this.queueClear = false;\n        this.filepath = \"\";\n        this.draw = this.draw.bind(this)\n        this.draw();\n        this.moveComplete = true;\n        this.doNotHoverTypes = [\"sheep\", \"fired\"]\n    }\n\n    // type choices:\n    //* \"empty\"\n    //* \"sheep\"\n    //* \"sheep_hidden\"\n    //* \"fired\"\n\n    // color choices:\n    //* \"head\"\n    //* \"body\"\n    //* \"empty\"\n\n    //* hoverState choices:\n    //* \"blank\"\n    //* \"hover\"\n\n    queueMove() {\n        this.moveComplete = false;\n    }\n\n    lerp(start_value, end_value, pct) {\n        return (start_value + (end_value - start_value) * pct);\n    }\n\n    easeIn(t) {\n        return t * t;\n    }\n\n    easeOut(t) {\n        return this.flip(this.square(this.flip(t)));\n    }\n\n    easeInOut(t) {\n        return this.lerp(this.easeIn(t), this.easeOut(t), t);\n    }\n\n    flip(t) {\n        return 1 - t;\n    }\n\n    square(t) {\n        return t * t;\n    }\n\n    current_pct(start_value, end_value, current_value) {\n        // with each of these, what's the current % complete?\n        // answer:  (z - x) / (y - x)\n        // answerv2:  (cur - start) / (end - start);\n        return (current_value - start_value) / (end_value - start_value);\n    }\n\n    clearTime() {\n        this.timeElapsed = 0;\n        this.currentTime = 0;\n        this.lastTime = 0;\n    }\n\n    moveDown() {\n        // note that draw methods atm are based on xPOS.\n        let start_value = this.yPosI;\n        let end_value = this.yPosI + 600;\n        let current_value = this.yPos;\n\n        this.currentTime = Date.now();\n        this.timeElapsed += ((this.currentTime - this.lastTime) / 1000);\n        this.lastTime = Date.now();\n\n        let newY = this.lerp(start_value, end_value, this.easeInOut(this.timeElapsed / this.lerpDuration));\n\n        if (this.timeElapsed < this.lerpDuration) {\n            this.yPos = newY;\n            this.moveComplete = false;\n        } else {\n            this.yPos = end_value;\n            this.moveComplete = true;\n        }\n        \n    }\n\n    moveUp() {\n        let start_value = this.yPosI + 600;\n        let end_value = this.yPosI;\n        let current_value = this.yPos;\n        // let current_percent = this.current_pct(start_value, end_value, current_value);\n\n        // let percent = current_percent + this.moveSpeed;\n\n        this.currentTime = Date.now();\n        this.timeElapsed += ((this.currentTime - this.lastTime) / 1000);\n        this.lastTime = Date.now();\n\n        let newY = this.lerp(start_value, end_value, this.easeInOut(this.timeElapsed / this.lerpDuration));\n\n        if (this.timeElapsed < this.lerpDuration) {\n            this.yPos = newY;\n            this.moveComplete = false;\n        } else {\n            this.yPos = end_value;\n            this.moveComplete = true;\n        }\n    }\n\n    setColor(newColor) {\n        this.color = newColor;\n    }\n\n    setType(newType){\n        this.type = newType;\n    }\n\n    setHoverState(newHoverState){\n        this.hoverState = newHoverState;\n    }\n\n    draw() {\n        let filepath = \"\"\n        if (this.type === \"gameBG\") {\n            filepath = 'assets/game_bg.png'\n        } else if (this.type === \"github\"){\n            filepath = 'assets/github_button.png'\n        } else if (this.type === \"gameLogo\") {\n            filepath = 'assets/battlesheep_logo_v3.png'\n        } else if (this.type === \"gameSheep\") {\n            filepath = 'assets/sheep_head.png'\n        } else if (this.type === \"sheep\"){\n            if (this.color === \"head\") {\n                filepath = 'assets/sheep_head.png'\n            } else if (this.color === \"body\") {\n                filepath = 'assets/sheep_body.png'\n            }\n        } else if (this.type === \"fired\") {\n            if (this.color === \"head\") {\n                filepath = 'assets/sheep_found_head.png'\n            } else if (this.color === \"body\") {\n                filepath = 'assets/sheep_found_body.png'\n            } else {\n                filepath = 'assets/square_empty.png'\n            }\n        } else {\n            if (this.hoverState === \"blank\") {\n                filepath = 'assets/square_outline.png'\n            } else if (this.hoverState === \"hover\") {\n                filepath = 'assets/square_outline_transparent.png'\n            }\n\n            // if (this.color === \"blank\"){\n            //     filepath = 'assets/square_outline.png'\n            // } else if (this.color === \"hover\"){\n            //     filepath = 'assets/square_outline_transparent.png'\n            // }\n        }\n\n        if (this.filepath !== filepath){\n            this.setImageInCanvas(this.context, filepath, this.xPos, this.yPos, this.xSize, this.ySize)\n        }\n        this.context.drawImage(this.image, (this.xPos - this.xSize/2), (this.yPos - this.ySize/2), this.xSize, this.ySize)\n\n    }\n\n    setImageInCanvas(context, filepath, xPos, yPos, xSize, ySize) {\n        var img1 = new Image();\n        //drawing of the test image - img1\n        // img1.onload = () => {\n        //     context.drawImage(img1, (xPos - xSize/2), (yPos - ySize/2), xSize, ySize);\n        // };\n        img1.src = filepath;\n        this.image = img1;\n    }\n}\n\n\n\nmodule.exports = Square;\n\n//# sourceURL=webpack://battlesheep/./src/square.js?");

/***/ }),

/***/ "./src/uiobject.js":
/*!*************************!*\
  !*** ./src/uiobject.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Square = __webpack_require__(/*! ./square.js */ \"./src/square.js\");\n\nclass UIObject {\n    constructor(context, xPos, yPos, xSize, ySize, type, color, status) {\n        this.context = context;\n        this.xPos = xPos;\n        this.yPos = yPos;\n        this.xSize = xSize;\n        this.ySize = ySize;\n        this.type = type;\n        this.color = color;\n        this.status = status;\n        this.image;\n        this.loadAllImages();\n    }\n\n    press() {\n        console.log(\"PRESSED\");\n        this.color = \"pressed\";\n        setTimeout(() => { \n            this.color = \"unpressed\";\n            if (this.status === \"on\"){\n                this.status = \"off\";\n            } else if (this.status === \"off\") {\n                this.status = \"on\";\n            }\n        }, 100);\n    }\n\n    draw() {\n        let filepath = \"\"\n        if (this.type === \"gameplay\") {\n            if (this.color === \"unpressed\"){\n                this.image = this.img1;\n            } else if (this.color === \"pressed\") {\n                this.image = this.img2;\n            }\n        } else if (this.type === \"music\") {\n            if (this.color === \"unpressed\"){\n                if (this.status === \"on\"){\n                    this.image = this.img3;\n                } else if (this.status === \"off\"){\n                    this.image = this.img4;\n                }\n            } else if (this.color === \"pressed\"){\n                if (this.status === \"on\"){\n                    this.image = this.img5;\n                } else if (this.status === \"off\"){\n                    this.image = this.img6;\n                }\n            }\n        } else if (this.type === \"sound\"){\n            if (this.color === \"unpressed\"){\n                if (this.status === \"on\"){\n                    this.image = this.img7;\n                } else if (this.status === \"off\"){\n                    this.image = this.img8;\n                }\n            } else if (this.color === \"pressed\"){\n                if (this.status === \"on\"){\n                    this.image = this.img9;\n                } else if (this.status === \"off\"){\n                    this.image = this.img10;\n                }\n            }\n        }\n\n        if (this.image !== undefined){\n            this.context.drawImage(this.image, (this.xPos - this.xSize/2), (this.yPos - this.ySize/2), this.xSize, this.ySize)\n        }\n\n    }\n\n    loadAllImages() {\n        // this.images = [this.img1, this.img2, this.img3, this.img4, this.img5, this.img6, this.img7, this.img8, this.img9, this.img10];\n        this.filepaths = [\n            'assets/UI/button_rect.png',\n            'assets/UI/button_rect_pressed.png',\n            'assets/UI/music_on_base.png',\n            'assets/UI/music_off_base.png',\n            'assets/UI/music_on_pressed.png',\n            'assets/UI/music_off_pressed.png',\n            'assets/UI/sound_on_base.png',\n            'assets/UI/sound_off_base.png',\n            'assets/UI/sound_on_pressed.png',\n            'assets/UI/sound_off_pressed.png'\n        ]\n        this.img1 = this.setImage(this.context, this.filepaths[0], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img2 = this.setImage(this.context, this.filepaths[1], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img3 = this.setImage(this.context, this.filepaths[2], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img4 = this.setImage(this.context, this.filepaths[3], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img5 = this.setImage(this.context, this.filepaths[4], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img6 = this.setImage(this.context, this.filepaths[5], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img7 = this.setImage(this.context, this.filepaths[6], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img8 = this.setImage(this.context, this.filepaths[7], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img9 = this.setImage(this.context, this.filepaths[8], this.xPos, this.yPos, this.xSize, this.ySize);\n        this.img10 = this.setImage(this.context, this.filepaths[9], this.xPos, this.yPos, this.xSize, this.ySize);\n        \n        // console.log(\"load complete\");\n\n    }\n\n    setImage(context, filepath, xPos, yPos, xSize, ySize) {\n        let _img = new Image();\n        _img.src = filepath;\n        // console.log(filepath);\n        // console.log(_img);\n        return _img;\n    }\n\n    setImageInCanvas(context, filepath, xPos, yPos, xSize, ySize) {\n        var img1 = new Image();\n        img1.src = filepath;\n        this.image = img1;\n    }\n}\n\nmodule.exports = UIObject;\n\n//# sourceURL=webpack://battlesheep/./src/uiobject.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;